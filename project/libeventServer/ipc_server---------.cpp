// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ipc_server.h"


#include "Serv.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TNonblockingServer.h>
#include <thrift/concurrency/BoostThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

using namespace  ::hn;

class ServHandler : virtual public ServIf {
 public:
  ServHandler() {
    // Your initialization goes here
  }

  int32_t put(const Student& s) {
    // Your implementation goes here
	  
	printf("%5d, %15d, %3d, %s \n",s.sage, s.sno, s.ssex, s.sname.c_str());

	return 0;
  }

};

int run_ipc_server(int port)
{
	shared_ptr<ServHandler> handler(new ServHandler());
	shared_ptr<TProcessor> processor(new ServProcessor(handler));
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(8);
	
	//PosixThreadFactory可以自定义（继承于ThreadFactory）
	shared_ptr<BoostThreadFactory> threadFactory = shared_ptr<BoostThreadFactory>(new BoostThreadFactory()); 

	threadManager->threadFactory(threadFactory);
	threadManager->start();
	TNonblockingServer server(processor, protocolFactory, 9090, threadManager);

	try {
		server.serve();
	}
	catch (TException e) {
		printf("Server.serve() failed\n");
		exit(-1);
	}

	return 0;
}


