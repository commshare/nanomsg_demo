// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace platform {

namespace {

const ::google::protobuf::Descriptor* sc_msg_connected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_msg_connected_reflection_ = NULL;
const ::google::protobuf::Descriptor* csc_msg_heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csc_msg_heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_msg_recvresult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_msg_recvresult_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_msg_servertime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_msg_servertime_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_msg_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_msg_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_msg_logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_msg_logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_msg_chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_msg_chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_msg_request_userinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_msg_request_userinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_msg_userinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_msg_userinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_platform_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_platform_2eproto() {
  protobuf_AddDesc_platform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "platform.proto");
  GOOGLE_CHECK(file != NULL);
  sc_msg_connected_descriptor_ = file->message_type(0);
  static const int sc_msg_connected_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_connected, order_),
  };
  sc_msg_connected_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sc_msg_connected_descriptor_,
      sc_msg_connected::internal_default_instance(),
      sc_msg_connected_offsets_,
      -1,
      -1,
      -1,
      sizeof(sc_msg_connected),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_connected, _internal_metadata_));
  csc_msg_heartbeat_descriptor_ = file->message_type(1);
  static const int csc_msg_heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csc_msg_heartbeat, time_),
  };
  csc_msg_heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      csc_msg_heartbeat_descriptor_,
      csc_msg_heartbeat::internal_default_instance(),
      csc_msg_heartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(csc_msg_heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csc_msg_heartbeat, _internal_metadata_));
  cs_msg_recvresult_descriptor_ = file->message_type(2);
  static const int cs_msg_recvresult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_recvresult, result_),
  };
  cs_msg_recvresult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cs_msg_recvresult_descriptor_,
      cs_msg_recvresult::internal_default_instance(),
      cs_msg_recvresult_offsets_,
      -1,
      -1,
      -1,
      sizeof(cs_msg_recvresult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_recvresult, _internal_metadata_));
  sc_msg_servertime_descriptor_ = file->message_type(3);
  static const int sc_msg_servertime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_servertime, time_),
  };
  sc_msg_servertime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sc_msg_servertime_descriptor_,
      sc_msg_servertime::internal_default_instance(),
      sc_msg_servertime_offsets_,
      -1,
      -1,
      -1,
      sizeof(sc_msg_servertime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_servertime, _internal_metadata_));
  cs_msg_login_descriptor_ = file->message_type(4);
  static const int cs_msg_login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_login, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_login, userpsd_),
  };
  cs_msg_login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cs_msg_login_descriptor_,
      cs_msg_login::internal_default_instance(),
      cs_msg_login_offsets_,
      -1,
      -1,
      -1,
      sizeof(cs_msg_login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_login, _internal_metadata_));
  cs_msg_logout_descriptor_ = file->message_type(5);
  static const int cs_msg_logout_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_logout, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_logout, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_logout, recv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_logout, msg_),
  };
  cs_msg_logout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cs_msg_logout_descriptor_,
      cs_msg_logout::internal_default_instance(),
      cs_msg_logout_offsets_,
      -1,
      -1,
      -1,
      sizeof(cs_msg_logout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_logout, _internal_metadata_));
  cs_msg_chat_descriptor_ = file->message_type(6);
  static const int cs_msg_chat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_chat, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_chat, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_chat, recv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_chat, msg_),
  };
  cs_msg_chat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cs_msg_chat_descriptor_,
      cs_msg_chat::internal_default_instance(),
      cs_msg_chat_offsets_,
      -1,
      -1,
      -1,
      sizeof(cs_msg_chat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_chat, _internal_metadata_));
  sc_msg_request_userinfo_descriptor_ = file->message_type(7);
  static const int sc_msg_request_userinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_request_userinfo, userid_),
  };
  sc_msg_request_userinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sc_msg_request_userinfo_descriptor_,
      sc_msg_request_userinfo::internal_default_instance(),
      sc_msg_request_userinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(sc_msg_request_userinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_request_userinfo, _internal_metadata_));
  sc_msg_userinfo_descriptor_ = file->message_type(8);
  static const int sc_msg_userinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_userinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_userinfo, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_userinfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_userinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_userinfo, address_),
  };
  sc_msg_userinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sc_msg_userinfo_descriptor_,
      sc_msg_userinfo::internal_default_instance(),
      sc_msg_userinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(sc_msg_userinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_msg_userinfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_platform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sc_msg_connected_descriptor_, sc_msg_connected::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      csc_msg_heartbeat_descriptor_, csc_msg_heartbeat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cs_msg_recvresult_descriptor_, cs_msg_recvresult::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sc_msg_servertime_descriptor_, sc_msg_servertime::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cs_msg_login_descriptor_, cs_msg_login::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cs_msg_logout_descriptor_, cs_msg_logout::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cs_msg_chat_descriptor_, cs_msg_chat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sc_msg_request_userinfo_descriptor_, sc_msg_request_userinfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sc_msg_userinfo_descriptor_, sc_msg_userinfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_platform_2eproto() {
  sc_msg_connected_default_instance_.Shutdown();
  delete sc_msg_connected_reflection_;
  csc_msg_heartbeat_default_instance_.Shutdown();
  delete csc_msg_heartbeat_reflection_;
  cs_msg_recvresult_default_instance_.Shutdown();
  delete cs_msg_recvresult_reflection_;
  sc_msg_servertime_default_instance_.Shutdown();
  delete sc_msg_servertime_reflection_;
  cs_msg_login_default_instance_.Shutdown();
  delete cs_msg_login_reflection_;
  cs_msg_logout_default_instance_.Shutdown();
  delete cs_msg_logout_reflection_;
  cs_msg_chat_default_instance_.Shutdown();
  delete cs_msg_chat_reflection_;
  sc_msg_request_userinfo_default_instance_.Shutdown();
  delete sc_msg_request_userinfo_reflection_;
  sc_msg_userinfo_default_instance_.Shutdown();
  delete sc_msg_userinfo_reflection_;
}

void protobuf_InitDefaults_platform_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  sc_msg_connected_default_instance_.DefaultConstruct();
  csc_msg_heartbeat_default_instance_.DefaultConstruct();
  cs_msg_recvresult_default_instance_.DefaultConstruct();
  sc_msg_servertime_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  cs_msg_login_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  cs_msg_logout_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  cs_msg_chat_default_instance_.DefaultConstruct();
  sc_msg_request_userinfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  sc_msg_userinfo_default_instance_.DefaultConstruct();
  sc_msg_connected_default_instance_.get_mutable()->InitAsDefaultInstance();
  csc_msg_heartbeat_default_instance_.get_mutable()->InitAsDefaultInstance();
  cs_msg_recvresult_default_instance_.get_mutable()->InitAsDefaultInstance();
  sc_msg_servertime_default_instance_.get_mutable()->InitAsDefaultInstance();
  cs_msg_login_default_instance_.get_mutable()->InitAsDefaultInstance();
  cs_msg_logout_default_instance_.get_mutable()->InitAsDefaultInstance();
  cs_msg_chat_default_instance_.get_mutable()->InitAsDefaultInstance();
  sc_msg_request_userinfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  sc_msg_userinfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_platform_2eproto_once_);
void protobuf_InitDefaults_platform_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_platform_2eproto_once_,
                 &protobuf_InitDefaults_platform_2eproto_impl);
}
void protobuf_AddDesc_platform_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_platform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016platform.proto\022\010platform\"!\n\020sc_msg_con"
    "nected\022\r\n\005order\030\001 \001(\005\"!\n\021csc_msg_heartbe"
    "at\022\014\n\004time\030\001 \001(\003\"#\n\021cs_msg_recvresult\022\016\n"
    "\006result\030\001 \001(\005\"!\n\021sc_msg_servertime\022\014\n\004ti"
    "me\030\001 \001(\005\"A\n\014cs_msg_login\022\016\n\006device\030\001 \001(\005"
    "\022\020\n\010username\030\002 \001(\t\022\017\n\007userpsd\030\003 \001(\t\"N\n\rc"
    "s_msg_logout\022\016\n\006device\030\001 \001(\005\022\017\n\007from_id\030"
    "\002 \001(\005\022\017\n\007recv_id\030\003 \001(\005\022\013\n\003msg\030\004 \001(\t\"L\n\013c"
    "s_msg_chat\022\016\n\006device\030\001 \001(\005\022\017\n\007from_id\030\002 "
    "\001(\005\022\017\n\007recv_id\030\003 \001(\005\022\013\n\003msg\030\004 \001(\t\")\n\027sc_"
    "msg_request_userinfo\022\016\n\006userid\030\001 \001(\005\"Z\n\017"
    "sc_msg_userinfo\022\016\n\006userid\030\001 \001(\005\022\013\n\003age\030\002"
    " \001(\005\022\013\n\003sex\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\017\n\007addre"
    "ss\030\005 \001(\tb\006proto3", 536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "platform.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_platform_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_platform_2eproto_once_);
void protobuf_AddDesc_platform_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_platform_2eproto_once_,
                 &protobuf_AddDesc_platform_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_platform_2eproto {
  StaticDescriptorInitializer_platform_2eproto() {
    protobuf_AddDesc_platform_2eproto();
  }
} static_descriptor_initializer_platform_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sc_msg_connected::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sc_msg_connected::sc_msg_connected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.sc_msg_connected)
}

void sc_msg_connected::InitAsDefaultInstance() {
}

sc_msg_connected::sc_msg_connected(const sc_msg_connected& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.sc_msg_connected)
}

void sc_msg_connected::SharedCtor() {
  order_ = 0;
  _cached_size_ = 0;
}

sc_msg_connected::~sc_msg_connected() {
  // @@protoc_insertion_point(destructor:platform.sc_msg_connected)
  SharedDtor();
}

void sc_msg_connected::SharedDtor() {
}

void sc_msg_connected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_msg_connected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_msg_connected_descriptor_;
}

const sc_msg_connected& sc_msg_connected::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sc_msg_connected> sc_msg_connected_default_instance_;

sc_msg_connected* sc_msg_connected::New(::google::protobuf::Arena* arena) const {
  sc_msg_connected* n = new sc_msg_connected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sc_msg_connected::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.sc_msg_connected)
  order_ = 0;
}

bool sc_msg_connected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.sc_msg_connected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.sc_msg_connected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.sc_msg_connected)
  return false;
#undef DO_
}

void sc_msg_connected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.sc_msg_connected)
  // optional int32 order = 1;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.sc_msg_connected)
}

::google::protobuf::uint8* sc_msg_connected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.sc_msg_connected)
  // optional int32 order = 1;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.sc_msg_connected)
  return target;
}

size_t sc_msg_connected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.sc_msg_connected)
  size_t total_size = 0;

  // optional int32 order = 1;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_msg_connected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.sc_msg_connected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sc_msg_connected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sc_msg_connected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.sc_msg_connected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.sc_msg_connected)
    UnsafeMergeFrom(*source);
  }
}

void sc_msg_connected::MergeFrom(const sc_msg_connected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.sc_msg_connected)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sc_msg_connected::UnsafeMergeFrom(const sc_msg_connected& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.order() != 0) {
    set_order(from.order());
  }
}

void sc_msg_connected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.sc_msg_connected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_msg_connected::CopyFrom(const sc_msg_connected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.sc_msg_connected)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sc_msg_connected::IsInitialized() const {

  return true;
}

void sc_msg_connected::Swap(sc_msg_connected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sc_msg_connected::InternalSwap(sc_msg_connected* other) {
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sc_msg_connected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_msg_connected_descriptor_;
  metadata.reflection = sc_msg_connected_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sc_msg_connected

// optional int32 order = 1;
void sc_msg_connected::clear_order() {
  order_ = 0;
}
::google::protobuf::int32 sc_msg_connected::order() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_connected.order)
  return order_;
}
void sc_msg_connected::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:platform.sc_msg_connected.order)
}

inline const sc_msg_connected* sc_msg_connected::internal_default_instance() {
  return &sc_msg_connected_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int csc_msg_heartbeat::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

csc_msg_heartbeat::csc_msg_heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.csc_msg_heartbeat)
}

void csc_msg_heartbeat::InitAsDefaultInstance() {
}

csc_msg_heartbeat::csc_msg_heartbeat(const csc_msg_heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.csc_msg_heartbeat)
}

void csc_msg_heartbeat::SharedCtor() {
  time_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

csc_msg_heartbeat::~csc_msg_heartbeat() {
  // @@protoc_insertion_point(destructor:platform.csc_msg_heartbeat)
  SharedDtor();
}

void csc_msg_heartbeat::SharedDtor() {
}

void csc_msg_heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csc_msg_heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csc_msg_heartbeat_descriptor_;
}

const csc_msg_heartbeat& csc_msg_heartbeat::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<csc_msg_heartbeat> csc_msg_heartbeat_default_instance_;

csc_msg_heartbeat* csc_msg_heartbeat::New(::google::protobuf::Arena* arena) const {
  csc_msg_heartbeat* n = new csc_msg_heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void csc_msg_heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.csc_msg_heartbeat)
  time_ = GOOGLE_LONGLONG(0);
}

bool csc_msg_heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.csc_msg_heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.csc_msg_heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.csc_msg_heartbeat)
  return false;
#undef DO_
}

void csc_msg_heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.csc_msg_heartbeat)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.csc_msg_heartbeat)
}

::google::protobuf::uint8* csc_msg_heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.csc_msg_heartbeat)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.csc_msg_heartbeat)
  return target;
}

size_t csc_msg_heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.csc_msg_heartbeat)
  size_t total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csc_msg_heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.csc_msg_heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const csc_msg_heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const csc_msg_heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.csc_msg_heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.csc_msg_heartbeat)
    UnsafeMergeFrom(*source);
  }
}

void csc_msg_heartbeat::MergeFrom(const csc_msg_heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.csc_msg_heartbeat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void csc_msg_heartbeat::UnsafeMergeFrom(const csc_msg_heartbeat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void csc_msg_heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.csc_msg_heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csc_msg_heartbeat::CopyFrom(const csc_msg_heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.csc_msg_heartbeat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool csc_msg_heartbeat::IsInitialized() const {

  return true;
}

void csc_msg_heartbeat::Swap(csc_msg_heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void csc_msg_heartbeat::InternalSwap(csc_msg_heartbeat* other) {
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata csc_msg_heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csc_msg_heartbeat_descriptor_;
  metadata.reflection = csc_msg_heartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// csc_msg_heartbeat

// optional int64 time = 1;
void csc_msg_heartbeat::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 csc_msg_heartbeat::time() const {
  // @@protoc_insertion_point(field_get:platform.csc_msg_heartbeat.time)
  return time_;
}
void csc_msg_heartbeat::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:platform.csc_msg_heartbeat.time)
}

inline const csc_msg_heartbeat* csc_msg_heartbeat::internal_default_instance() {
  return &csc_msg_heartbeat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cs_msg_recvresult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cs_msg_recvresult::cs_msg_recvresult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.cs_msg_recvresult)
}

void cs_msg_recvresult::InitAsDefaultInstance() {
}

cs_msg_recvresult::cs_msg_recvresult(const cs_msg_recvresult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.cs_msg_recvresult)
}

void cs_msg_recvresult::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

cs_msg_recvresult::~cs_msg_recvresult() {
  // @@protoc_insertion_point(destructor:platform.cs_msg_recvresult)
  SharedDtor();
}

void cs_msg_recvresult::SharedDtor() {
}

void cs_msg_recvresult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_msg_recvresult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_msg_recvresult_descriptor_;
}

const cs_msg_recvresult& cs_msg_recvresult::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<cs_msg_recvresult> cs_msg_recvresult_default_instance_;

cs_msg_recvresult* cs_msg_recvresult::New(::google::protobuf::Arena* arena) const {
  cs_msg_recvresult* n = new cs_msg_recvresult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cs_msg_recvresult::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.cs_msg_recvresult)
  result_ = 0;
}

bool cs_msg_recvresult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.cs_msg_recvresult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.cs_msg_recvresult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.cs_msg_recvresult)
  return false;
#undef DO_
}

void cs_msg_recvresult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.cs_msg_recvresult)
  // optional int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.cs_msg_recvresult)
}

::google::protobuf::uint8* cs_msg_recvresult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.cs_msg_recvresult)
  // optional int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.cs_msg_recvresult)
  return target;
}

size_t cs_msg_recvresult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.cs_msg_recvresult)
  size_t total_size = 0;

  // optional int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_msg_recvresult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.cs_msg_recvresult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const cs_msg_recvresult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cs_msg_recvresult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.cs_msg_recvresult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.cs_msg_recvresult)
    UnsafeMergeFrom(*source);
  }
}

void cs_msg_recvresult::MergeFrom(const cs_msg_recvresult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.cs_msg_recvresult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void cs_msg_recvresult::UnsafeMergeFrom(const cs_msg_recvresult& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void cs_msg_recvresult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.cs_msg_recvresult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_msg_recvresult::CopyFrom(const cs_msg_recvresult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.cs_msg_recvresult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool cs_msg_recvresult::IsInitialized() const {

  return true;
}

void cs_msg_recvresult::Swap(cs_msg_recvresult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cs_msg_recvresult::InternalSwap(cs_msg_recvresult* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cs_msg_recvresult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_msg_recvresult_descriptor_;
  metadata.reflection = cs_msg_recvresult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cs_msg_recvresult

// optional int32 result = 1;
void cs_msg_recvresult::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 cs_msg_recvresult::result() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_recvresult.result)
  return result_;
}
void cs_msg_recvresult::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_recvresult.result)
}

inline const cs_msg_recvresult* cs_msg_recvresult::internal_default_instance() {
  return &cs_msg_recvresult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sc_msg_servertime::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sc_msg_servertime::sc_msg_servertime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.sc_msg_servertime)
}

void sc_msg_servertime::InitAsDefaultInstance() {
}

sc_msg_servertime::sc_msg_servertime(const sc_msg_servertime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.sc_msg_servertime)
}

void sc_msg_servertime::SharedCtor() {
  time_ = 0;
  _cached_size_ = 0;
}

sc_msg_servertime::~sc_msg_servertime() {
  // @@protoc_insertion_point(destructor:platform.sc_msg_servertime)
  SharedDtor();
}

void sc_msg_servertime::SharedDtor() {
}

void sc_msg_servertime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_msg_servertime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_msg_servertime_descriptor_;
}

const sc_msg_servertime& sc_msg_servertime::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sc_msg_servertime> sc_msg_servertime_default_instance_;

sc_msg_servertime* sc_msg_servertime::New(::google::protobuf::Arena* arena) const {
  sc_msg_servertime* n = new sc_msg_servertime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sc_msg_servertime::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.sc_msg_servertime)
  time_ = 0;
}

bool sc_msg_servertime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.sc_msg_servertime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.sc_msg_servertime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.sc_msg_servertime)
  return false;
#undef DO_
}

void sc_msg_servertime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.sc_msg_servertime)
  // optional int32 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.sc_msg_servertime)
}

::google::protobuf::uint8* sc_msg_servertime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.sc_msg_servertime)
  // optional int32 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.sc_msg_servertime)
  return target;
}

size_t sc_msg_servertime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.sc_msg_servertime)
  size_t total_size = 0;

  // optional int32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_msg_servertime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.sc_msg_servertime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sc_msg_servertime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sc_msg_servertime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.sc_msg_servertime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.sc_msg_servertime)
    UnsafeMergeFrom(*source);
  }
}

void sc_msg_servertime::MergeFrom(const sc_msg_servertime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.sc_msg_servertime)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sc_msg_servertime::UnsafeMergeFrom(const sc_msg_servertime& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void sc_msg_servertime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.sc_msg_servertime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_msg_servertime::CopyFrom(const sc_msg_servertime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.sc_msg_servertime)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sc_msg_servertime::IsInitialized() const {

  return true;
}

void sc_msg_servertime::Swap(sc_msg_servertime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sc_msg_servertime::InternalSwap(sc_msg_servertime* other) {
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sc_msg_servertime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_msg_servertime_descriptor_;
  metadata.reflection = sc_msg_servertime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sc_msg_servertime

// optional int32 time = 1;
void sc_msg_servertime::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 sc_msg_servertime::time() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_servertime.time)
  return time_;
}
void sc_msg_servertime::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:platform.sc_msg_servertime.time)
}

inline const sc_msg_servertime* sc_msg_servertime::internal_default_instance() {
  return &sc_msg_servertime_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cs_msg_login::kDeviceFieldNumber;
const int cs_msg_login::kUsernameFieldNumber;
const int cs_msg_login::kUserpsdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cs_msg_login::cs_msg_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.cs_msg_login)
}

void cs_msg_login::InitAsDefaultInstance() {
}

cs_msg_login::cs_msg_login(const cs_msg_login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.cs_msg_login)
}

void cs_msg_login::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpsd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = 0;
  _cached_size_ = 0;
}

cs_msg_login::~cs_msg_login() {
  // @@protoc_insertion_point(destructor:platform.cs_msg_login)
  SharedDtor();
}

void cs_msg_login::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpsd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cs_msg_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_msg_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_msg_login_descriptor_;
}

const cs_msg_login& cs_msg_login::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<cs_msg_login> cs_msg_login_default_instance_;

cs_msg_login* cs_msg_login::New(::google::protobuf::Arena* arena) const {
  cs_msg_login* n = new cs_msg_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cs_msg_login::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.cs_msg_login)
  device_ = 0;
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpsd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool cs_msg_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.cs_msg_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platform.cs_msg_login.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userpsd;
        break;
      }

      // optional string userpsd = 3;
      case 3: {
        if (tag == 26) {
         parse_userpsd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpsd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userpsd().data(), this->userpsd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platform.cs_msg_login.userpsd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.cs_msg_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.cs_msg_login)
  return false;
#undef DO_
}

void cs_msg_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.cs_msg_login)
  // optional int32 device = 1;
  if (this->device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device(), output);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_login.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string userpsd = 3;
  if (this->userpsd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userpsd().data(), this->userpsd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_login.userpsd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userpsd(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.cs_msg_login)
}

::google::protobuf::uint8* cs_msg_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.cs_msg_login)
  // optional int32 device = 1;
  if (this->device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device(), target);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_login.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string userpsd = 3;
  if (this->userpsd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userpsd().data(), this->userpsd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_login.userpsd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userpsd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.cs_msg_login)
  return target;
}

size_t cs_msg_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.cs_msg_login)
  size_t total_size = 0;

  // optional int32 device = 1;
  if (this->device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device());
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string userpsd = 3;
  if (this->userpsd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpsd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_msg_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.cs_msg_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const cs_msg_login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cs_msg_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.cs_msg_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.cs_msg_login)
    UnsafeMergeFrom(*source);
  }
}

void cs_msg_login::MergeFrom(const cs_msg_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.cs_msg_login)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void cs_msg_login::UnsafeMergeFrom(const cs_msg_login& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.device() != 0) {
    set_device(from.device());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userpsd().size() > 0) {

    userpsd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpsd_);
  }
}

void cs_msg_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.cs_msg_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_msg_login::CopyFrom(const cs_msg_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.cs_msg_login)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool cs_msg_login::IsInitialized() const {

  return true;
}

void cs_msg_login::Swap(cs_msg_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cs_msg_login::InternalSwap(cs_msg_login* other) {
  std::swap(device_, other->device_);
  username_.Swap(&other->username_);
  userpsd_.Swap(&other->userpsd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cs_msg_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_msg_login_descriptor_;
  metadata.reflection = cs_msg_login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cs_msg_login

// optional int32 device = 1;
void cs_msg_login::clear_device() {
  device_ = 0;
}
::google::protobuf::int32 cs_msg_login::device() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_login.device)
  return device_;
}
void cs_msg_login::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_login.device)
}

// optional string username = 2;
void cs_msg_login::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& cs_msg_login::username() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_login.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_login::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platform.cs_msg_login.username)
}
void cs_msg_login::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platform.cs_msg_login.username)
}
void cs_msg_login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platform.cs_msg_login.username)
}
::std::string* cs_msg_login::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:platform.cs_msg_login.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* cs_msg_login::release_username() {
  // @@protoc_insertion_point(field_release:platform.cs_msg_login.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_login::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:platform.cs_msg_login.username)
}

// optional string userpsd = 3;
void cs_msg_login::clear_userpsd() {
  userpsd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& cs_msg_login::userpsd() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_login.userpsd)
  return userpsd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_login::set_userpsd(const ::std::string& value) {
  
  userpsd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platform.cs_msg_login.userpsd)
}
void cs_msg_login::set_userpsd(const char* value) {
  
  userpsd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platform.cs_msg_login.userpsd)
}
void cs_msg_login::set_userpsd(const char* value, size_t size) {
  
  userpsd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platform.cs_msg_login.userpsd)
}
::std::string* cs_msg_login::mutable_userpsd() {
  
  // @@protoc_insertion_point(field_mutable:platform.cs_msg_login.userpsd)
  return userpsd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* cs_msg_login::release_userpsd() {
  // @@protoc_insertion_point(field_release:platform.cs_msg_login.userpsd)
  
  return userpsd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_login::set_allocated_userpsd(::std::string* userpsd) {
  if (userpsd != NULL) {
    
  } else {
    
  }
  userpsd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpsd);
  // @@protoc_insertion_point(field_set_allocated:platform.cs_msg_login.userpsd)
}

inline const cs_msg_login* cs_msg_login::internal_default_instance() {
  return &cs_msg_login_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cs_msg_logout::kDeviceFieldNumber;
const int cs_msg_logout::kFromIdFieldNumber;
const int cs_msg_logout::kRecvIdFieldNumber;
const int cs_msg_logout::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cs_msg_logout::cs_msg_logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.cs_msg_logout)
}

void cs_msg_logout::InitAsDefaultInstance() {
}

cs_msg_logout::cs_msg_logout(const cs_msg_logout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.cs_msg_logout)
}

void cs_msg_logout::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, reinterpret_cast<char*>(&recv_id_) -
    reinterpret_cast<char*>(&device_) + sizeof(recv_id_));
  _cached_size_ = 0;
}

cs_msg_logout::~cs_msg_logout() {
  // @@protoc_insertion_point(destructor:platform.cs_msg_logout)
  SharedDtor();
}

void cs_msg_logout::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cs_msg_logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_msg_logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_msg_logout_descriptor_;
}

const cs_msg_logout& cs_msg_logout::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<cs_msg_logout> cs_msg_logout_default_instance_;

cs_msg_logout* cs_msg_logout::New(::google::protobuf::Arena* arena) const {
  cs_msg_logout* n = new cs_msg_logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cs_msg_logout::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.cs_msg_logout)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(cs_msg_logout, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<cs_msg_logout*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_, recv_id_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool cs_msg_logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.cs_msg_logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional int32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recv_id;
        break;
      }

      // optional int32 recv_id = 3;
      case 3: {
        if (tag == 24) {
         parse_recv_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platform.cs_msg_logout.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.cs_msg_logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.cs_msg_logout)
  return false;
#undef DO_
}

void cs_msg_logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.cs_msg_logout)
  // optional int32 device = 1;
  if (this->device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device(), output);
  }

  // optional int32 from_id = 2;
  if (this->from_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_id(), output);
  }

  // optional int32 recv_id = 3;
  if (this->recv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recv_id(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_logout.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.cs_msg_logout)
}

::google::protobuf::uint8* cs_msg_logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.cs_msg_logout)
  // optional int32 device = 1;
  if (this->device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device(), target);
  }

  // optional int32 from_id = 2;
  if (this->from_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_id(), target);
  }

  // optional int32 recv_id = 3;
  if (this->recv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recv_id(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_logout.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.cs_msg_logout)
  return target;
}

size_t cs_msg_logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.cs_msg_logout)
  size_t total_size = 0;

  // optional int32 device = 1;
  if (this->device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device());
  }

  // optional int32 from_id = 2;
  if (this->from_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_id());
  }

  // optional int32 recv_id = 3;
  if (this->recv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recv_id());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_msg_logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.cs_msg_logout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const cs_msg_logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cs_msg_logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.cs_msg_logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.cs_msg_logout)
    UnsafeMergeFrom(*source);
  }
}

void cs_msg_logout::MergeFrom(const cs_msg_logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.cs_msg_logout)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void cs_msg_logout::UnsafeMergeFrom(const cs_msg_logout& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.device() != 0) {
    set_device(from.device());
  }
  if (from.from_id() != 0) {
    set_from_id(from.from_id());
  }
  if (from.recv_id() != 0) {
    set_recv_id(from.recv_id());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void cs_msg_logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.cs_msg_logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_msg_logout::CopyFrom(const cs_msg_logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.cs_msg_logout)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool cs_msg_logout::IsInitialized() const {

  return true;
}

void cs_msg_logout::Swap(cs_msg_logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cs_msg_logout::InternalSwap(cs_msg_logout* other) {
  std::swap(device_, other->device_);
  std::swap(from_id_, other->from_id_);
  std::swap(recv_id_, other->recv_id_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cs_msg_logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_msg_logout_descriptor_;
  metadata.reflection = cs_msg_logout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cs_msg_logout

// optional int32 device = 1;
void cs_msg_logout::clear_device() {
  device_ = 0;
}
::google::protobuf::int32 cs_msg_logout::device() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_logout.device)
  return device_;
}
void cs_msg_logout::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_logout.device)
}

// optional int32 from_id = 2;
void cs_msg_logout::clear_from_id() {
  from_id_ = 0;
}
::google::protobuf::int32 cs_msg_logout::from_id() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_logout.from_id)
  return from_id_;
}
void cs_msg_logout::set_from_id(::google::protobuf::int32 value) {
  
  from_id_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_logout.from_id)
}

// optional int32 recv_id = 3;
void cs_msg_logout::clear_recv_id() {
  recv_id_ = 0;
}
::google::protobuf::int32 cs_msg_logout::recv_id() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_logout.recv_id)
  return recv_id_;
}
void cs_msg_logout::set_recv_id(::google::protobuf::int32 value) {
  
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_logout.recv_id)
}

// optional string msg = 4;
void cs_msg_logout::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& cs_msg_logout::msg() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_logout.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_logout::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platform.cs_msg_logout.msg)
}
void cs_msg_logout::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platform.cs_msg_logout.msg)
}
void cs_msg_logout::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platform.cs_msg_logout.msg)
}
::std::string* cs_msg_logout::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:platform.cs_msg_logout.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* cs_msg_logout::release_msg() {
  // @@protoc_insertion_point(field_release:platform.cs_msg_logout.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_logout::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:platform.cs_msg_logout.msg)
}

inline const cs_msg_logout* cs_msg_logout::internal_default_instance() {
  return &cs_msg_logout_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cs_msg_chat::kDeviceFieldNumber;
const int cs_msg_chat::kFromIdFieldNumber;
const int cs_msg_chat::kRecvIdFieldNumber;
const int cs_msg_chat::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cs_msg_chat::cs_msg_chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.cs_msg_chat)
}

void cs_msg_chat::InitAsDefaultInstance() {
}

cs_msg_chat::cs_msg_chat(const cs_msg_chat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.cs_msg_chat)
}

void cs_msg_chat::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, reinterpret_cast<char*>(&recv_id_) -
    reinterpret_cast<char*>(&device_) + sizeof(recv_id_));
  _cached_size_ = 0;
}

cs_msg_chat::~cs_msg_chat() {
  // @@protoc_insertion_point(destructor:platform.cs_msg_chat)
  SharedDtor();
}

void cs_msg_chat::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cs_msg_chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_msg_chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_msg_chat_descriptor_;
}

const cs_msg_chat& cs_msg_chat::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<cs_msg_chat> cs_msg_chat_default_instance_;

cs_msg_chat* cs_msg_chat::New(::google::protobuf::Arena* arena) const {
  cs_msg_chat* n = new cs_msg_chat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cs_msg_chat::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.cs_msg_chat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(cs_msg_chat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<cs_msg_chat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_, recv_id_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool cs_msg_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.cs_msg_chat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional int32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recv_id;
        break;
      }

      // optional int32 recv_id = 3;
      case 3: {
        if (tag == 24) {
         parse_recv_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platform.cs_msg_chat.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.cs_msg_chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.cs_msg_chat)
  return false;
#undef DO_
}

void cs_msg_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.cs_msg_chat)
  // optional int32 device = 1;
  if (this->device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device(), output);
  }

  // optional int32 from_id = 2;
  if (this->from_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_id(), output);
  }

  // optional int32 recv_id = 3;
  if (this->recv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recv_id(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_chat.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.cs_msg_chat)
}

::google::protobuf::uint8* cs_msg_chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.cs_msg_chat)
  // optional int32 device = 1;
  if (this->device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device(), target);
  }

  // optional int32 from_id = 2;
  if (this->from_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_id(), target);
  }

  // optional int32 recv_id = 3;
  if (this->recv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recv_id(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.cs_msg_chat.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.cs_msg_chat)
  return target;
}

size_t cs_msg_chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.cs_msg_chat)
  size_t total_size = 0;

  // optional int32 device = 1;
  if (this->device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device());
  }

  // optional int32 from_id = 2;
  if (this->from_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_id());
  }

  // optional int32 recv_id = 3;
  if (this->recv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recv_id());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_msg_chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.cs_msg_chat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const cs_msg_chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cs_msg_chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.cs_msg_chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.cs_msg_chat)
    UnsafeMergeFrom(*source);
  }
}

void cs_msg_chat::MergeFrom(const cs_msg_chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.cs_msg_chat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void cs_msg_chat::UnsafeMergeFrom(const cs_msg_chat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.device() != 0) {
    set_device(from.device());
  }
  if (from.from_id() != 0) {
    set_from_id(from.from_id());
  }
  if (from.recv_id() != 0) {
    set_recv_id(from.recv_id());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void cs_msg_chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.cs_msg_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_msg_chat::CopyFrom(const cs_msg_chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.cs_msg_chat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool cs_msg_chat::IsInitialized() const {

  return true;
}

void cs_msg_chat::Swap(cs_msg_chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cs_msg_chat::InternalSwap(cs_msg_chat* other) {
  std::swap(device_, other->device_);
  std::swap(from_id_, other->from_id_);
  std::swap(recv_id_, other->recv_id_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cs_msg_chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_msg_chat_descriptor_;
  metadata.reflection = cs_msg_chat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cs_msg_chat

// optional int32 device = 1;
void cs_msg_chat::clear_device() {
  device_ = 0;
}
::google::protobuf::int32 cs_msg_chat::device() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_chat.device)
  return device_;
}
void cs_msg_chat::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_chat.device)
}

// optional int32 from_id = 2;
void cs_msg_chat::clear_from_id() {
  from_id_ = 0;
}
::google::protobuf::int32 cs_msg_chat::from_id() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_chat.from_id)
  return from_id_;
}
void cs_msg_chat::set_from_id(::google::protobuf::int32 value) {
  
  from_id_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_chat.from_id)
}

// optional int32 recv_id = 3;
void cs_msg_chat::clear_recv_id() {
  recv_id_ = 0;
}
::google::protobuf::int32 cs_msg_chat::recv_id() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_chat.recv_id)
  return recv_id_;
}
void cs_msg_chat::set_recv_id(::google::protobuf::int32 value) {
  
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:platform.cs_msg_chat.recv_id)
}

// optional string msg = 4;
void cs_msg_chat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& cs_msg_chat::msg() const {
  // @@protoc_insertion_point(field_get:platform.cs_msg_chat.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_chat::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platform.cs_msg_chat.msg)
}
void cs_msg_chat::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platform.cs_msg_chat.msg)
}
void cs_msg_chat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platform.cs_msg_chat.msg)
}
::std::string* cs_msg_chat::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:platform.cs_msg_chat.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* cs_msg_chat::release_msg() {
  // @@protoc_insertion_point(field_release:platform.cs_msg_chat.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void cs_msg_chat::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:platform.cs_msg_chat.msg)
}

inline const cs_msg_chat* cs_msg_chat::internal_default_instance() {
  return &cs_msg_chat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sc_msg_request_userinfo::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sc_msg_request_userinfo::sc_msg_request_userinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.sc_msg_request_userinfo)
}

void sc_msg_request_userinfo::InitAsDefaultInstance() {
}

sc_msg_request_userinfo::sc_msg_request_userinfo(const sc_msg_request_userinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.sc_msg_request_userinfo)
}

void sc_msg_request_userinfo::SharedCtor() {
  userid_ = 0;
  _cached_size_ = 0;
}

sc_msg_request_userinfo::~sc_msg_request_userinfo() {
  // @@protoc_insertion_point(destructor:platform.sc_msg_request_userinfo)
  SharedDtor();
}

void sc_msg_request_userinfo::SharedDtor() {
}

void sc_msg_request_userinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_msg_request_userinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_msg_request_userinfo_descriptor_;
}

const sc_msg_request_userinfo& sc_msg_request_userinfo::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sc_msg_request_userinfo> sc_msg_request_userinfo_default_instance_;

sc_msg_request_userinfo* sc_msg_request_userinfo::New(::google::protobuf::Arena* arena) const {
  sc_msg_request_userinfo* n = new sc_msg_request_userinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sc_msg_request_userinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.sc_msg_request_userinfo)
  userid_ = 0;
}

bool sc_msg_request_userinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.sc_msg_request_userinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.sc_msg_request_userinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.sc_msg_request_userinfo)
  return false;
#undef DO_
}

void sc_msg_request_userinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.sc_msg_request_userinfo)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.sc_msg_request_userinfo)
}

::google::protobuf::uint8* sc_msg_request_userinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.sc_msg_request_userinfo)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.sc_msg_request_userinfo)
  return target;
}

size_t sc_msg_request_userinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.sc_msg_request_userinfo)
  size_t total_size = 0;

  // optional int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_msg_request_userinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.sc_msg_request_userinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sc_msg_request_userinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sc_msg_request_userinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.sc_msg_request_userinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.sc_msg_request_userinfo)
    UnsafeMergeFrom(*source);
  }
}

void sc_msg_request_userinfo::MergeFrom(const sc_msg_request_userinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.sc_msg_request_userinfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sc_msg_request_userinfo::UnsafeMergeFrom(const sc_msg_request_userinfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void sc_msg_request_userinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.sc_msg_request_userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_msg_request_userinfo::CopyFrom(const sc_msg_request_userinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.sc_msg_request_userinfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sc_msg_request_userinfo::IsInitialized() const {

  return true;
}

void sc_msg_request_userinfo::Swap(sc_msg_request_userinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sc_msg_request_userinfo::InternalSwap(sc_msg_request_userinfo* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sc_msg_request_userinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_msg_request_userinfo_descriptor_;
  metadata.reflection = sc_msg_request_userinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sc_msg_request_userinfo

// optional int32 userid = 1;
void sc_msg_request_userinfo::clear_userid() {
  userid_ = 0;
}
::google::protobuf::int32 sc_msg_request_userinfo::userid() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_request_userinfo.userid)
  return userid_;
}
void sc_msg_request_userinfo::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:platform.sc_msg_request_userinfo.userid)
}

inline const sc_msg_request_userinfo* sc_msg_request_userinfo::internal_default_instance() {
  return &sc_msg_request_userinfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sc_msg_userinfo::kUseridFieldNumber;
const int sc_msg_userinfo::kAgeFieldNumber;
const int sc_msg_userinfo::kSexFieldNumber;
const int sc_msg_userinfo::kNameFieldNumber;
const int sc_msg_userinfo::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sc_msg_userinfo::sc_msg_userinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_platform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.sc_msg_userinfo)
}

void sc_msg_userinfo::InitAsDefaultInstance() {
}

sc_msg_userinfo::sc_msg_userinfo(const sc_msg_userinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:platform.sc_msg_userinfo)
}

void sc_msg_userinfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&userid_) + sizeof(sex_));
  _cached_size_ = 0;
}

sc_msg_userinfo::~sc_msg_userinfo() {
  // @@protoc_insertion_point(destructor:platform.sc_msg_userinfo)
  SharedDtor();
}

void sc_msg_userinfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sc_msg_userinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_msg_userinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_msg_userinfo_descriptor_;
}

const sc_msg_userinfo& sc_msg_userinfo::default_instance() {
  protobuf_InitDefaults_platform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sc_msg_userinfo> sc_msg_userinfo_default_instance_;

sc_msg_userinfo* sc_msg_userinfo::New(::google::protobuf::Arena* arena) const {
  sc_msg_userinfo* n = new sc_msg_userinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sc_msg_userinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.sc_msg_userinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(sc_msg_userinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<sc_msg_userinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, sex_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool sc_msg_userinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.sc_msg_userinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // optional int32 age = 2;
      case 2: {
        if (tag == 16) {
         parse_age:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platform.sc_msg_userinfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional string address = 5;
      case 5: {
        if (tag == 42) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platform.sc_msg_userinfo.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.sc_msg_userinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.sc_msg_userinfo)
  return false;
#undef DO_
}

void sc_msg_userinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.sc_msg_userinfo)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // optional int32 sex = 3;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.sc_msg_userinfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string address = 5;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.sc_msg_userinfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:platform.sc_msg_userinfo)
}

::google::protobuf::uint8* sc_msg_userinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.sc_msg_userinfo)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // optional int32 sex = 3;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.sc_msg_userinfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string address = 5;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platform.sc_msg_userinfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:platform.sc_msg_userinfo)
  return target;
}

size_t sc_msg_userinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.sc_msg_userinfo)
  size_t total_size = 0;

  // optional int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // optional int32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string address = 5;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_msg_userinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.sc_msg_userinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sc_msg_userinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sc_msg_userinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.sc_msg_userinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.sc_msg_userinfo)
    UnsafeMergeFrom(*source);
  }
}

void sc_msg_userinfo::MergeFrom(const sc_msg_userinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.sc_msg_userinfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sc_msg_userinfo::UnsafeMergeFrom(const sc_msg_userinfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void sc_msg_userinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.sc_msg_userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_msg_userinfo::CopyFrom(const sc_msg_userinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.sc_msg_userinfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sc_msg_userinfo::IsInitialized() const {

  return true;
}

void sc_msg_userinfo::Swap(sc_msg_userinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sc_msg_userinfo::InternalSwap(sc_msg_userinfo* other) {
  std::swap(userid_, other->userid_);
  std::swap(age_, other->age_);
  std::swap(sex_, other->sex_);
  name_.Swap(&other->name_);
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sc_msg_userinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_msg_userinfo_descriptor_;
  metadata.reflection = sc_msg_userinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sc_msg_userinfo

// optional int32 userid = 1;
void sc_msg_userinfo::clear_userid() {
  userid_ = 0;
}
::google::protobuf::int32 sc_msg_userinfo::userid() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_userinfo.userid)
  return userid_;
}
void sc_msg_userinfo::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:platform.sc_msg_userinfo.userid)
}

// optional int32 age = 2;
void sc_msg_userinfo::clear_age() {
  age_ = 0;
}
::google::protobuf::int32 sc_msg_userinfo::age() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_userinfo.age)
  return age_;
}
void sc_msg_userinfo::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:platform.sc_msg_userinfo.age)
}

// optional int32 sex = 3;
void sc_msg_userinfo::clear_sex() {
  sex_ = 0;
}
::google::protobuf::int32 sc_msg_userinfo::sex() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_userinfo.sex)
  return sex_;
}
void sc_msg_userinfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:platform.sc_msg_userinfo.sex)
}

// optional string name = 4;
void sc_msg_userinfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sc_msg_userinfo::name() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_userinfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sc_msg_userinfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platform.sc_msg_userinfo.name)
}
void sc_msg_userinfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platform.sc_msg_userinfo.name)
}
void sc_msg_userinfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platform.sc_msg_userinfo.name)
}
::std::string* sc_msg_userinfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:platform.sc_msg_userinfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sc_msg_userinfo::release_name() {
  // @@protoc_insertion_point(field_release:platform.sc_msg_userinfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sc_msg_userinfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:platform.sc_msg_userinfo.name)
}

// optional string address = 5;
void sc_msg_userinfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sc_msg_userinfo::address() const {
  // @@protoc_insertion_point(field_get:platform.sc_msg_userinfo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sc_msg_userinfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platform.sc_msg_userinfo.address)
}
void sc_msg_userinfo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platform.sc_msg_userinfo.address)
}
void sc_msg_userinfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platform.sc_msg_userinfo.address)
}
::std::string* sc_msg_userinfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:platform.sc_msg_userinfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sc_msg_userinfo::release_address() {
  // @@protoc_insertion_point(field_release:platform.sc_msg_userinfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sc_msg_userinfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:platform.sc_msg_userinfo.address)
}

inline const sc_msg_userinfo* sc_msg_userinfo::internal_default_instance() {
  return &sc_msg_userinfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace platform

// @@protoc_insertion_point(global_scope)
